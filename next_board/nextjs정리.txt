page.js 가 메인페이지이다.

localhost:3000 페이지 즉, 테스트화면을 실행시키고 싶으면 npm run dev 를 터미널에 입력하면 된다.

파일구조 설명.
1. page.js는 layout.js 파일 내부에서 불러지는 파일이다. 한 마디로 react 에서 index.js 파일에서 app.js 를 불러오는 것과 비슷.

2. 1에서 비슷하다고 했는데, 다른 점은 layout.js 라는 도화지에 page.js 그림을 그려주는 것이기 때문.
> 이것을 응용하면 공통으로 사용하는 "메뉴바", "로그인상태창" 등을 layout.js 에 그려주면 모든 페이지에서 공유한다.

3. 
3-1) global.css == 모든 페이지에 적용할 스타일을 적는 곳.
3-2) 파일명.module.css == 특정 페이지에 적용할 스타일을 적는 곳.

4. api 폴더
> 서버기능을 만드는 곳.
경로는 2가지로 만들 수 있다

4-1) app 폴더 아래 api 라는 폴더로 만들기 - ex) myBoard 프로젝트라면 경로는 myBoard/app/api
4-2) ★★★ 프로젝트 폴더 아래에 pages폴더 아래에 api 폴더 만들고 그 아래에 만들기. ex) myBoard 프로젝트라면 경로는 myBoard/pages/api
4-2방법이 추천 방법이다. 4-1번 방법은 아직 에러가 좀 있다고 함.

5. public 폴더
> 이미지, 소스코드 외의 파일들 보관용.



라우팅
> 자동 라우팅 기능이 있기 때문에 파일, 폴더 하나만 만들면 라우팅이 자동으로 된다.
> app 폴더 안에 폴더를 하나 만들어주고 보여줄 페이지를 만들어주자.
ex) app > list > page.jsx
보여줄 페이지 명은 반드시 "page.jsx" 로 만들어야한다. 다른 파일명은 안된다.
보여줄 파일의 확장자는 JSX 로 해주자.

2024 01 30 > 테스트 해보니 page.js 라는 파일명으로 존재해야만 정상적으로 라우팅이 된다.(주소창에 대문자 소문자 구분 안함.)
app > list > page.js 이런식으로 만들었다면, 폴더명으로 주소창에 입력하면 연결된다.
http://localhost:3000/list
http://localhost:3000/List
두 개 주소 모두 list 페이지로 연결시켜준다.


이미지
public 폴더 안에 넣고 저장한다.
<img src="경로"></img> 태그를 사용한다.
경로는 public 폴더에 존재하는 파일이라면 (apple.png)
<img src="/apple.png" /> 를 주면 된다.
그냥 /파일명.확장자 를 쓸 수 있는 이유??? >> 빌드하면 public 폴더는 루트경로로 이동하게되므로 /apple.png 라고 써도 인식함.
※ 이미지 최적화 하기
lazy loading, 사이즈 최적화 하기.
layout shift 현상 막아주기 >> layout shift 라는 것은 이미지 로딩이 느리게 되어서 사이트 레이아웃이 밀려나는 현상.
방법
1. img 태그 대신 <Image> 태그를 사용하기.
2. Image 태그를 사용하면서 이미지의 경로를 작성할 땐 반드시 import 로 이미지를 변수로 가져와서 넣어줘야함.
☆주의☆ 
1. img태그처럼 그냥 막 집어넣으면 안됨. 반드시 import 로 이미지를 변수로 가져와서 넣어주자.
2. 외부사이트 이미지를 넣어야하면 반드시 width height 속성을 함께 써넣어줘야함. 필수임. 그리고 next.config.js 파일에 세팅도 해야함.




컴포넌트의 종류 및 차이점
1. 서버컴포넌트.
일반적인 next.js 형식으로 만드는 컴포넌트
보통 큰 페이지를 만들 때 레이아웃 잡는 느낌으로 만든다.
기능이 없으므로 로딩이 빠르다.
useState, useEffect 등의 기능 사용불가.

차이점 1) 서버컴포넌트에는 자바스크립트 기능을 넣을 수 없음. (html에 자바스크립트 기능넣기가 안되는 것과 동일한 원리)

2. ★ 클라이언트 컴포넌트
해당 컴포넌트 최상단 라인에 'use client' 라고 써주면 클라이언트 컴포넌트가 된다.
따옴표까지 써줘야한다.
'use client' 를 선언해줘야만 useState, useEffect 등의 기능을 사용할 수 있음.
즉, useState, useEffect 등의 기능들을 쓰는 컴포넌트들에만 'use client' 를 선언해주자.(보통 기능이 들어갈 컴포넌트만 따로 빼서 만든다.)




서버 만들기
1. 프로젝트 폴더 아래에 pages폴더 아래에 api 폴더 만들고 그 아래에 만들기. ex) myBoard 프로젝트라면 경로는 myBoard/pages/api
2. api 폴더 안에 기능용 js 파일 만들기. 파일명이 함수명으로 인식된다.
3. 함수파일 안에 함수명은 반드시 handler 가 되어야한다. == export default function handler(req, res) { ~기능정의~ }
4. export default로 당연히 내보내줘야함.

서버 기능 호출 방법?
경로+파일명 이 함수명 호출 방법이라는 것을 생각하고 진행하자.
1. get 요청
pages/api/testFunc.js 형식으로 되어있다면? >> http://localhost:3000/api/test 이렇게 요청하면 get 요청 실행함.

2. post 요청
2-1) form 태그를 이용해서 action 속성에 값을 주고
2-2) method 속성에 'POST' 값을 할당해야함.



export 관련 지식
let age = 20;
let name = 'mincj';
1. export default 는 1파일에 1개만 사용 가능하다. 1개의 객체만 내보낼 때 쓴다.
ex) export default age;
만약 객체 여러개를 내보내고 싶다면?
2. default 를 빼고 export {객체명, 객체명} 해줘야함 
ex) export {age, name}
또한 여러 객체를 내보냈다면 import 하는 페이지에서 내보낸 변수명을 그대로 사용해야한다.
ex) import {age, name} from './경로/파일명.js'